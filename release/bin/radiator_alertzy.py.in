#!  /usr/bin/env python3
# -*- coding: UTF-8 -*-

import os
import sys
import re
import time
import urllib.request, urllib.parse, urllib.error
from email import utils
from datetime import datetime

if len(sys.argv) > 2:
   sys.stderr.write(sys.argv[0] + " [<notification group>]\n")
   sys.stderr.write("Empty of '-' as notification group uses default group 'Radiator'\n")
   sys.stderr.write("Notification group is also used as title of the message.\n")
   sys.stderr.write("\n")
   sys.stderr.write("The following env variables are required:\n")
   sys.stderr.write(" ACCOUNT_KEY  The account key\n")
   sys.stderr.write("\n")
   sys.exit(1)

ACCOUNT_KEY=os.getenv("ACCOUNT_KEY")

enabled = True
enabled = enabled and ACCOUNT_KEY is not None
enabled = enabled and len(ACCOUNT_KEY) > 0 and ACCOUNT_KEY != "-"

if not enabled:
   sys.stdout.write("ACCOUNT_KEY environment unset or '-', disabled.\n")
   sys.stdout.flush()
   while True:
      line = sys.stdin.readline()
      if not line: break # EOF
   sys.exit(0)

NOTIFICATION_GROUP=sys.argv[1]
if len(NOTIFICATION_GROUP) == 0 or NOTIFICATION_GROUP == "-":
   sys.stdout.write("Using default notification group\n")
   NOTIFICATION_GROUP="Radiator"
else:
   sys.stdout.write("Using notification group {0}\n".format(NOTIFICATION_GROUP))
sys.stdout.flush()

message_content = {
      "accountKey" : ACCOUNT_KEY,
      "title" : NOTIFICATION_GROUP.encode('utf-8'),
      "group" : NOTIFICATION_GROUP.encode('utf-8'),
      "message" : ""
   }

timestampRE = re.compile(r"^\[TIME\] [A-Za-z]*, ([-0-9]*), ([:0-9]*)")
errorRE = re.compile(r"^\[ERROR\] (....-..-.., ..:..:..): (.*)")
valueCleanupRE = re.compile(r"[^-0-9.]*")
valueRE = re.compile(r"^\[VALUE\] 0*([0-9]+) \[([^]]*)\] = \[([^]]*)] \[(.)\] \(([-0-9]*)\)")

def send_error_message(error_time, error_description):
   text = "Die Heizung hat eine StÃ¶rung gemeldet! (" + \
          error_time +  ": " + \
          error_description + ")"

   now = utils.formatdate(time.mktime(datetime.now().timetuple()))
   try:
      url = "https://alertzy.app/send"
      message_content["message"] = text.encode('utf-8')
      data = urllib.parse.urlencode(message_content).encode('utf-8')
      req = urllib.request.Request(url, data)
      response = urllib.request.urlopen(req)
      contents = response.read()
      sys.stdout.write("{0}: Sent message to alertzy server:\n".format(now))
      sys.stdout.write("{0}\n".format(contents))
      sys.stdout.flush()
   except Exception as error:
      sys.stdout.write("{0}: Send message to alertzy server: FAILED ({1})\n".format(now, error))
      sys.stdout.flush()

def send_off_message(off_duration):
   off_hours = int(off_duration / 3600)
   text = "Die Heizung ist seit mehr als %d Stunde(n) ausgeschaltet!\n" % (off_hours)

   now = utils.formatdate(time.mktime(datetime.now().timetuple()))
   try:
      url = "https://alertzy.app/send"
      message_content["message"] = text.encode('utf-8')
      data = urllib.parse.urlencode(message_content).encode('utf-8')
      req = urllib.request.Request(url, data)
      response = urllib.request.urlopen(req)
      contents = response.read()
      sys.stdout.write("{0}: Sent message to alertzy server:\n".format(now))
      sys.stdout.write("{0}\n".format(contents))
      sys.stdout.flush()
   except Exception as error:
      sys.stdout.write("{0}: Send message to alertzy server: FAILED ({1})\n".format(now, error))
      sys.stdout.flush()

timestamp = None

state = 0
turned_off = None
off_send_distance = 3600
while True:
   line = sys.stdin.readline()
   if not line: break # EOF

   timestamp_match = timestampRE.match(line)
   if timestamp_match:
      timestamp=timestamp_match.group(1) + " " + timestamp_match.group(2)

   error_match = errorRE.match(line)
   if error_match:
      send_error_message(error_match.group(1), error_match.group(2))

   if timestamp:
      value_match=valueRE.match(line)
      if value_match:
         key=int(value_match.group(1))
         if key == 0:
            state = value_match.group(5)

      if len(line) == 1:
         # Check for radiator being turned off.
         if int(state) == 6:
            # Radiator is off.

            if not turned_off:
               turned_off = datetime.now()
               off_send_distance = 3600
            else:
               # Off for 1 or more hours
               off_duration=(datetime.now() - turned_off).total_seconds()
               if off_duration > off_send_distance:
                  send_off_message(off_send_distance)
                  off_send_distance *= 2
         else:
            # Radiator is on
            turned_off = None

         state = 0

